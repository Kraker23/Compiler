@page "/Aplicaciones"
@using Compiler.AppBlazor.Components.Component
@using Compiler.Shared.DataObjects
@using Compiler.Shared.Interface.IBL
@using System.Windows
@using Compiler.Shared.Objects
@inject IArchivoExclusion_BL managerExclusion;
@inject IAplicacion_BL managerAplicacion;
@inject ICarpeta_BL managerCarpeta;
@inject IProyecto_BL managerProyecto;
@inject NavigationManager navigationManager;

<h1>Aplicaciones</h1>

<RadzenMenu>
    <RadzenMenuItem Click="RefreshClick" Text="Refresh" Icon="sync" IconColor="@Colors.Info"></RadzenMenuItem>
    <RadzenMenuItem Click="AddClick" Text="Add" Icon="add" IconColor="@Colors.Success"></RadzenMenuItem>
    <RadzenMenuItem Click="DuplicateClick" Text="Duplicate" Icon="content_copy" IconColor="orange"></RadzenMenuItem>
    <RadzenMenuItem Click="RemoveClick" Text="Remove" Icon="delete" IconColor="@Colors.Danger"></RadzenMenuItem>

    <RadzenMenuItem Click="AddFolderClick" Text="AddFolder" Icon="folder_open" IconColor="@Colors.Success"></RadzenMenuItem>
    <RadzenMenuItem Click="RemoveFolderClick" Text="RemoveFolder" Icon="folder_delete" IconColor="@Colors.Danger"></RadzenMenuItem>

    <RadzenMenuItem Click="Usar" Text="Usar" Icon="upload_file" IconColor="@Colors.Warning"></RadzenMenuItem>
</RadzenMenu>


<RadzenRow Style="margin-top:10px">
    <RadzenColumn Size="12" SizeLG="4">
        <RadzenCard>
            <RadzenTree @bind-Value=@selection
                        Data=@tree
                        Expand=@LoadTree
                        Change=@OnChange
                        Style="width: 100%; height: 100%">
                <RadzenTreeLevel Text=@GetTextForNode Template=@FolderTemplate />@* Expanded="@(data => true)" *@
            </RadzenTree>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeLG="8">
        <RadzenCard>
            @if (aplicacionSelect != null)
            {
                <ComponentAplicacion aplicacion="aplicacionSelect" saveEvent="Save" />
            }
            @if (carpetaSelect != null)
            {
                <ComponentCarpeta carpeta="carpetaSelect" saveEvent="SaveCarpeta" />
            }
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    private List<Aplicacion> aplicaciones { get; set; }
    private List<Carpeta> carpetas { get; set; }
    object selection { get; set; }

    private Aplicacion aplicacionSelect { get; set; }
    private Carpeta carpetaSelect { get; set; }

    object selectionTree { get; set; }

    private List<TreeNode> tree { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadData();
    }

    private void LoadData()
    {
        aplicaciones = managerAplicacion.getAplicaciones();
        carpetas = managerCarpeta.getCarpetas().OrderBy(x => x.nombre).ToList();
        CargarTree();
        aplicacionSelect = null;
        selection = null;
    }

    #region Tree

    void CargarTree()
    {
        tree = new List<TreeNode>();
        foreach (Carpeta carpetaAux in carpetas)
        {
            TreeNode aux = new TreeNode();
            aux.Id = carpetaAux.id;
            aux.Text = carpetaAux.nombre;
            aux.value = carpetaAux;
            // aux.Template = "folder";
            aux.Children = CargarAplicacionesByCarpeta(carpetaAux.id);
            tree.Add(aux);

        }
        foreach (Aplicacion aplicacionAux in aplicaciones.Where(x => x.fk_IdCarpeta == null))
        {
            TreeNode aux = new TreeNode();
            aux.Id = aplicacionAux.id;
            aux.Text = aplicacionAux.nombre;
            aux.value = aplicacionAux;
            tree.Add(aux);
        }
    }

    List<TreeNode> CargarAplicacionesByCarpeta(Guid guid)
    {
        if (aplicaciones.Any(x => x.fk_IdCarpeta == guid))
        {
            List<TreeNode> treeApps = new List<TreeNode>();
            foreach (Aplicacion aplicacionAux in aplicaciones.Where(x => x.fk_IdCarpeta == guid).OrderBy(x => x.nombre).ToList())
            {
                TreeNode aux = new TreeNode();
                aux.Id = aplicacionAux.id;
                aux.ParentId = guid;
                aux.Text = aplicacionAux.nombre;
                aux.value = aplicacionAux;
                treeApps.Add(aux);
            }
            return treeApps;
        }
        return null;
    }

    RenderFragment<RadzenTreeItem> FolderTemplate = (context) => builder =>
       {
           TreeNode objTreeNode = context.Value as TreeNode;
           builder.OpenComponent<RadzenIcon>(0);
           if (objTreeNode.value is Carpeta)
           {
               builder.AddAttribute(1, "Icon", "folder");
               builder.AddAttribute(1, "IconColor", "#FFBA01");
           }
           else
           {
               builder.AddAttribute(1, "Icon", "inbox_customize");
               builder.AddAttribute(1, "IconColor", "#01A6F0");
           }
           builder.CloseComponent();
           builder.AddContent(2, context.Text);
       };

    void LoadTree(TreeExpandEventArgs args)
    {
        var objTreeNode = args.Value as TreeNode;
        if (objTreeNode != null)
        {
            args.Children.Data = objTreeNode.Children;
            args.Children.Text = GetTextForNode;
            args.Children.HasChildren = e => ((TreeNode)e).Children?.Any() ?? false;
            args.Children.Template = FolderTemplate;
        }
    }

    string GetTextForNode(object data)
    {
        return ((TreeNode)data).Text;
    }

    void OnChange()
    {
        aplicacionSelect = null;
        if (((TreeNode)selection).value is Aplicacion)
        {
            aplicacionSelect = (Aplicacion)((TreeNode)selection).value;
            carpetaSelect = null;
        }
        if (((TreeNode)selection).value is Carpeta)
        {
            carpetaSelect = (Carpeta)((TreeNode)selection).value;
            aplicacionSelect = null;
        }
    }

    #endregion


    void RefreshClick(MenuItemEventArgs args)
    {
        LoadData();
    }

    void AddClick(MenuItemEventArgs args)
    {
        aplicacionSelect = new(true);

        if (((TreeNode)selection).value is Carpeta)
        {
            aplicacionSelect.fk_IdCarpeta = ((Carpeta)((TreeNode)selection).value).id;
        }
        carpetaSelect = null;

    }
    void DuplicateClick(MenuItemEventArgs args)
    {
        if (selection != null && ((TreeNode)selection).value is Aplicacion && aplicacionSelect != null)
        {
            Aplicacion appAux = new Aplicacion(aplicacionSelect);
            appAux.isNew = true;
            aplicacionSelect = appAux;
            carpetaSelect = null;
        }
    }

    void AddFolderClick(MenuItemEventArgs args)
    {
        aplicacionSelect = null;
        carpetaSelect = new();
    }

    void RemoveFolderClick(MenuItemEventArgs args)
    {
        if (((TreeNode)selection).value is Carpeta && carpetaSelect != null)
        {
            if (managerCarpeta.ExisteCarpeta(carpetaSelect.id))
            {
                var result = MessageBox.Show($"Estas seguro que quiere borrar esta Carpeta '{carpetaSelect.nombre}'?",
               "Borrar Carpeta", MessageBoxButton.OKCancel, MessageBoxImage.Information);

                if (result == MessageBoxResult.OK)
                {
                    if (!managerAplicacion.AnyAplicacionConCarpeta(carpetaSelect.id))
                    {
                        managerCarpeta.BorrarCarpeta(carpetaSelect.id);
                        LoadData();
                    }
                    else
                    {
                        MessageBox.Show("No puedes borrar una Carpeta que este en alguna Aplicacion", "Borrar Carpeta",
                                MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("No Existe la Carpeta", "Borrar Carpeta", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

    }

    void RemoveClick(MenuItemEventArgs args)
    {
        if (((TreeNode)selection).value is Aplicacion && aplicacionSelect != null)
        {
            if (managerAplicacion.ExisteAplicacion(aplicacionSelect.id))
            {
                var result = MessageBox.Show($"Estas seguro que quiere borrar esta Aplicacion '{aplicacionSelect.nombre}'?",
                "Borrar Aplicacion", MessageBoxButton.OKCancel, MessageBoxImage.Information);

                if (result == MessageBoxResult.OK)
                {
                    if (!managerProyecto.AnyProyectoConAplicacion(aplicacionSelect.id))
                    {
                        managerAplicacion.BorrarAplicacion(aplicacionSelect.id);
                        LoadData();
                    }
                    else
                    {
                        MessageBox.Show("No puedes borrar una Aplicacion que este en algun Proyecto", "Borrar Aplicacion",
                                MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("No Existe la Aplicacion", "Borrar Aplicacion", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }

    void Save(Aplicacion aplicacion)
    {
        managerAplicacion.ModificarAplicacion(aplicacion);
        LoadData();
    }
    void SaveCarpeta(Carpeta carpeta)
    {
        managerCarpeta.ModificarCarpeta(carpeta);
        LoadData();
    }


    void Usar()
    {
        if (aplicacionSelect != null)
        {
            navigationManager.NavigateTo($"/usaraplicacion/{aplicacionSelect.id}");
        }

    }


}
